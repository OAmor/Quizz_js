***************************** JAVA *****************************
Java est un langage de programmation moderne développé par Sun Microsystems (aujourd'hui racheté par Oracle). Il ne faut surtout pas le confondre avec JavaScript (langage de scripts utilisé principalement sur les sites web), car Java n'a rien à voir.
Une de ses plus grandes forces est son excellente portabilité : une fois votre programme créé, il fonctionnera automatiquement sous Windows, Mac, Linux, etc.

- Les variables et les opérateurs
Nous commençons maintenant sérieusement la programmation. Dans ce chapitre, nous allons découvrir les variables. On les retrouve dans la quasi-totalité des langages de programmation. Une variable est un élément qui stocke des informations de toute sorte en mémoire : des chiffres, des résultats de calcul, des tableaux, des renseignements fournis par l'utilisateur...

les noms de variables sont constitués de lettres, de chiffres et du tiret-bas _ uniquement ;
le premier caractère doit être une lettre (majuscule ou minuscule) ;
on ne peut pas utiliser d'accents ;
on ne peut pas utiliser d'espaces dans le nom.
	Acces_modifier type nom_de_variable;

Acces modifier : public protected private 
type : int float String

ex : public int age;


- Lire les entrées clavier
Je me doute qu'il vous tardait de pouvoir communiquer avec votre application
e vous ai dit que vos variables de type String sont en réalité des objets de type String. Pour que Java puisse lire ce que
vous tapez au clavier, vous allez devoir utiliser un objet de type Scanner. Cet objet peut prendre différents paramètres, mais ici
nous n'en utiliserons qu'un : celui qui correspond à l'entrée standard en Java. Lorsque vous faites
System.out.println();, je vous rappelle que vous appliquez la méthode println() sur la sortie standard ; ici, nous
allons utiliser l'entrée standard System.in. Donc, avant d'indiquer à Java qu'il faut lire ce que nous allons taper au clavier,
nous devrons instancier un objet Scanner. Avant de vous expliquer ceci, créez une nouvelle classe et tapez cette ligne de code
dans votre méthode main :
	Scanner sc = new Scanner(System.in);



-Les conditions

Dans une classe, la lecture et l'exécution se font de façon séquentielle, c'est-à-dire ligne par ligne. Avec les conditions, nous
allons pouvoir gérer différents cas de figure sans pour autant lire tout le code. Vous vous rendrez vite compte que tous vos
projets ne sont que des enchaînements et des imbrications de conditions et de boucles (notion que l'on abordera au chapitre
suivant)
if(//condition)
{
//Exécution des instructions si la condition est remplie
}
else
{
//Exécution des instructions si la condition n'est pas remplie
}
- L'héritage :

La notion d'héritage est l'un des fondements de la programmation orientée objet. Grâce
à elle, nous pourrons créer des classes héritées (aussi appelées classes classes dérivées) de nos classes mères (aussi appelées
classes classes de base). Nous pourrons créer autant de classes dérivées, par rapport à notre classe de base, que nous le
souhaitons. De plus, nous pourrons nous servir d'une classe dérivée comme d'une classe de base pour élaborer encore une autre
classe dérivée.
ps : Java ne supporte pas l'héritage multiple ?

ex : class Capitale extends Ville {
}




Quelle est la compagnie qui a créé Java ?

   Oracle
   Sun Microsystems
   Microsoft
   Google


Quelle le bon syntext de déclaration d'un variable ?
	public age int;
	public int age;
	variable age;
	variable int age;

Comment conditioner un code java ?
	if(condition){}else{}
	if(condition){else{}}
	if(condition){}else(condition){}
	if(condition){}if{}
Java supporte-il l'héritage multiple ?
	Oui , mais au max 3 class
	Oui , mais au max 2 class
	Oui , avec infinity des class mère
	Non



*****************************END JAVA *****************************


***************************** C++ *****************************

Le langage C++ est un des langages les plus célèbres au monde. Très utilisé, notamment dans le secteur des jeux vidéo qui
apprécie ses performances et ses possibilités, le C++ est désormais incontournable pour les développeurs.
Le C++ est le descendant du langage C. Ces deux langages, bien que semblables au premier abord, sont néanmoins différents. Le
C++ propose de nouvelles fonctionnalités, comme la programmation orientée objet (POO). Elles en font un langage très puissant
qui permet de programmer avec une approche différente du langage C.

- Les variables et les opérateurs
Nous commençons maintenant sérieusement la programmation. Dans ce chapitre, nous allons découvrir les variables. On les retrouve dans la quasi-totalité des langages de programmation. Une variable est un élément qui stocke des informations de toute sorte en mémoire : des chiffres, des résultats de calcul, des tableaux, des renseignements fournis par l'utilisateur...

les noms de variables sont constitués de lettres, de chiffres et du tiret-bas _ uniquement ;
le premier caractère doit être une lettre (majuscule ou minuscule) ;
on ne peut pas utiliser d'accents ;
on ne peut pas utiliser d'espaces dans le nom.
	type nom_de_variable;

Acces modifier : public protected private 
type : int float double

ex : int age;




-Création des class

pour créer un objet, il faut d'abord créer une classe !
Je m'explique : pour construire une maison, vous avez besoin d'un plan d'architecte non ? Eh bien imaginez simplement que la
classe c'est le plan et que l'objet c'est la maison.
« Créer une classe », c'est donc dessiner les plans de l'objet.
Une fois que vous avez les plans, vous pouvez faire autant de maisons que vous voulez en vous basant sur ces plans. Pour les
objets c'est pareil : une fois que vous avez fait la classe (le plan), vous pouvez créer autant d'objets du même type que vous
voulez

ex : class Etudiant{
	
}


- L'héritage :

Comme je vous l'ai dit dans l'introduction, la notion d'héritage est l'un des fondements de la programmation orientée objet. Grâce
à elle, nous pourrons créer des classes héritées (aussi appelées classes classes dérivées) de nos classes mères (aussi appelées
classes classes de base). Nous pourrons créer autant de classes dérivées, par rapport à notre classe de base, que nous le
souhaitons. De plus, nous pourrons nous servir d'une classe dérivée comme d'une classe de base pour élaborer encore une autre
classe dérivée.
ps : Java ne supporte pas l'héritage multiple ?

ex : class Capitale : public Ville {
}


Quele est la bonne reponse ?
c++ est basé sur c 
c++ est basé sur java
c++ est basé sur fortran
c++ est basé sur pascal

Comment déclarer un variable dans c++ ?
	int 5age;
	int -age;
	int _age;
	age int;

Pour crée une class dans C++ , on utilise : 
	new class
	class
	create class
	new

Comment faire l'héritage dans C++ ?
	class Capitale extends public Ville
	class Capitale héritage public Ville
	class Capitale : public Ville
	class Capitale : class Ville



************************* KOTLIN *************************
Le langage Kotlin est un langage développé par JetBrains, entreprise conceptrice de l'EDI Intellij Idea entre autres. Cependant il est open-source.

Ses principaux avantages, pour reprendre les principaux arguments du site officiel, résident dans la simplification du code pour de nombreuses tâches courantes (par exemple, la création de POJO), une sécurité de code accrue grâce à un contrôle plus stricte que Java (notamment pour la nullité des valeurs), et une facilité d’interaction vers et à partir du langage Java et avec la JVM - ce qui permet notamment la réutilisation directe de la plupart des codes écrits en Java,



- Declaratiiondes variable

En Kotlin, on distingue les variables dont on peut changer la valeur, et les variables immuables qui ne sont pas tout à fait des constantes :

    le mot-clé val permet de déclarer une variable immuable,
    le mots-clé var permet de déclarer une variable altérable.


pattern : val/var nom_de_variable : type = "Valeur initial"
ex : 
val nom:String = "IL"
// nom = "Master IL" // Interdit !!! Car nom a été déclaré avec val
var age = 10
age += 12 // aucun problème car age est altérable.

Pour rappel, il faut préciser le type de variable après le nom, et pas avant comme en Java.


-Structures de contrôle 

Les structures de contrôle sont similaires à celles du java (if, for, while, switch…), à ceci près que la plupart des structures de Kotlin sont des expressions, et donc leur résultat peuvent être affectés à des variables, telles que nous l'avons vu dans la section précédente ; mais également, l'équivalent de la structure switch en Kotlin est beaucoup plus simple d'utilisation et beaucoup plus puissante.

L'instruction while (ou do … while) en Kotlin, tout comme en Java, ne retourne pas d'expression. Elle s'utilise aussi comme en Java : rien de nouveau.
var i = 0
while (i < 10) {
  i += 1
  println(i)
}

var j = 0
do {
   j += 1
   println(j)
} while (j < 10)
L'instruction for : 
for (i in 0..10) print(i)

- Les tableaux
Tout d'abord, en Kotlin, les tableaux sont représentés par la classe générique Array : ainsi l'on peut déclarer par exemple, un Array<Int>, un Array<String>, voire même un Array<Personne> (type personnel défini peu avant dans ce chapitre). Evidement, un Array ne peut contenir que des valeurs d'un même type commun.

On peut construire un Array de deux manières différentes : soit par le constructeur Array, soit par la fonction arrayOf. La fonction arrayOf est plus proche de ce que l'on connaît en Java, tandis que le constructeur Array permet de bénéficier de plus de contrôle sur l'initialisation :
 

val tableau1 = arrayOf(2,10,-1,4,9)
val tableau2 = Array(10, { i -> i * 2 })

Quelle est un langage développé par ?

   JetBrains
   Google
   Microsoft
   Intellij

 Comment déclarer un variable dans Kotlin ?
 	val nom : String
 	var nom:String = "Master IL - Web"
 	String nom = "Master IL - Web"
 	var String nom = "Master IL - Web"

Output ? for (i in 0..10) print(i)
	0 1 2 3 4 5 6 7 8 9 10
	1 2 3 4 5 6 7 8 9 10
	0 1 2 3 4 5 6 7 8 9 
	1 2 3 4 5 6 7 8 9

Output ? val tableau2 = Array(10, { i -> i * 2 }) print(tableau2[1])
	0
	1
	2
	4



********************* END KOTLIN ****************


******************* ANDROID ****************


Android est un OS mobile Open Source pour smartphone, PDA, MP3 et tablette. Conçu initialement par Android Inc , il a été racheté par Google en 2005.

Pour commencer la programmation Android, il faut d'abord installer le SDK Android et comprendre les bases de la programmation sous Android. Puis nous allons faire notre premier programme sous Android c'est-à-dire le bien connu « Hello Word » pour bien comprendre ces bases. 

- Composantes d'une application Android : 
 Une application Android est composée d'éléments de base : 

 	Activities (Activités en français) :  Une activité est la composante principale pour une application Android. Elle représente l'implémentation métier dans une application Android. 

 	Services :  Un service, à la différence d'une activité, ne possède pas de vue mais permet l'exécution d'un algorithme sur un temps indéfini. Il ne s'arrêtera que lorsque la tâche est finie ou que son exécution est arrêtée. 

 	Broadcast and Intent Receivers : 

Un Broadcast Receiver comme son nom l'indique permet d'écouter ce qui se passe sur le système ou sur votre application et déclencher une action que vous aurez prédéfinie. C'est souvent par ce mécanisme que les services sont lancés.

 	Content providers : 


Les « content providers » servent à accéder à des données depuis votre application. Vous pouvez accéder :

    aux contacts stockés dans le téléphone ;
    à l'agenda ;
    aux photos ;
    ainsi qu'à d'autres données depuis votre application grâce aux content providers.


Cycle de vie d'une application Android : 

OnCreate


Cette méthode est appelée à la création de votre activité (Activity). Elle sert à initialiser votre activité ainsi que toutes les données nécessaires à cette dernière.

Quand la méthode OnCreate est appelée, on lui passe un Bundle en argument. Ce Bundle contient l'état de sauvegarde enregistré lors de la dernière exécution de votre activité.
3.2. onStart


Cette méthode est appelée dans le cas où votre application est en arrière-plan et qu'elle repasse en avant-plan.

Si votre activité ne peut pas aller en avant-plan quelle que soit la raison, l'activité sera transférée à OnStop.
3.3. onResume


Cette méthode est appelée après OnStart (au moment où votre application repasse en avant-plan).

OnResume est aussi appelée quand votre application passe en arrière-plan à cause d'une autre application.
3.4. onPause


Appelée juste avant qu'une autre activité que la vôtre passe en OnResume. À ce stade, votre activité n'a plus accès à l'écran, vous devez arrêter de faire toute action en rapport avec l'interaction utilisateur. Vous pouvez par contre continuer à exécuter des algorithmes nécessaires mais qui ne consomment pas trop de CPU.
3.5. onStop


Appelée quand votre activité n'est plus visible quelle que soit la raison.
3.6. onDestroy


Appelée quand votre application est totalement fermée (Processus terminé).


Pour afficher un contenu dans une application Android , On doit utiliser :
	- Activities
	- Services
	- Broadcast and Intent Receivers
	- Content providers
Pour acceder aux photos , On doit utiliser : 
    - Activities
	- Services
	- Broadcast and Intent Receivers
	- Content providers

Quelle méthode est appelée à la création de première activité ?
	- onCreate
	- onResume
	- onStart
	- onDestroy

Au moment où votre application repasse en avant-plan , le système fait appel à : 
	- onPause
	- onResume
	- onStart
	- onDestroy



********************* git *******************

Si vous avez déjà travaillé sur un projet informatique, que ce soit un petit projet personnel ou un plus gros projet professionnel, vous avez certainement déjà rencontré un de ces problèmes :

    « Qui a modifié le fichier X, il marchait bien avant et maintenant il provoque des bugs ! » ;

    « Robert, tu peux m’aider en travaillant sur le fichier X pendant que je travaille sur le fichier Y ? Attention à ne pas toucher au fichier Y car si on travaille dessus en même temps je risque d’écraser tes modifications ! » ;

    « Qui a ajouté cette ligne de code dans ce fichier ? Elle ne sert à rien ! » ;

    « À quoi servent ces nouveaux fichiers et qui les a ajoutés au code du projet ? » ;

    « Quelles modifications avions-nous faites pour résoudre le bug de la page qui se ferme toute seule ? »
    Si ces problèmes-là vous parlent, vous auriez dû utiliser un logiciel de gestion de versions
    Dans ce tutoriel, je vais vous présenter Git, Il est 
Très puissant et récent, il a été créé par Linus Torvalds, qui est entre autres l’homme à l’origine de Linux. Il se distingue par sa rapidité et sa gestion des branches qui permettent de développer en parallèle de nouvelles fonctionnalités.



- Créer un nouveau dépôt ou cloner un dépôt existant

	Pour commencer à travailler avec Git, il y a deux solutions :

    soit vous créez un nouveau dépôt vide, si vous souhaitez commencer un nouveau projet ;

    soit vous clonez un dépôt existant, c’est-à-dire que vous récupérez tout l’historique des changements d’un projet pour pouvoir travailler dessus.

    * Créer un nouveau dépôt : git init


   * Cloner un dépôt existant : git clone dépôt_url
   	ex : git clone https://github.com/OAmor/Quizz_js/

- Modifier le code et effectuer des commits
  La commande  git status  vous indique les fichiers que vous avez modifiés récemment,
  Git vous liste tous les fichiers qui ont changé sur le disque. Il peut aussi bien détecter les modifications que les ajouts, les suppressions et les renommages.
  	pour commiter : 

  	git add .
  	git commit -m "Mesage sur les modifications"


  - Vérifions les logs

  Il est possible à tout moment de consulter l’historique des commits : ce sont les logs. Vous pouvez ainsi retrouver tout ce qui a été changé depuis les débuts du projet.

Lorsque vous avez effectué un commit, vous devriez donc le voir dans  git log  :

- Annuler les modifications d’un fichier avant un commit

Si vous avez modifié plusieurs fichiers mais que vous n’avez pas encore envoyé le commit et que vous voulez restaurer un fichier tel qu’il était au dernier commit, utilisez  git checkout



Qui a crée git ?
	- AMOR Ahmed Oussama
	- KERFAH Issam
	- MAGHARBI Abdessalem
	- LINUS Torvalds

Pour créer un nouveau dépôt ?
	- git init
	- git create
	- git new
	- git add

Pour effectuer des commits
	- git commit
	- git save
	- git save all
	- git add

Pour Vérifier les logs
	- git show log
	- git log
	- git show
	- git list




